// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operator operator
//
// swagger:model operator
type Operator struct {

	// Unique name of the operator.
	// Required: true
	Name *string `json:"name"`

	// Kind of operator. Different types are monitored by the service differently.
	// Required: true
	// Enum: [builtin olm]
	OperatorType *string `json:"operator_type"`

	// Positive number represents a timeout in seconds for the operator to be available.
	TimeoutSeconds int64 `json:"timeout_seconds,omitempty"`
}

// Validate validates this operator
func (m *Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operator) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var operatorTypeOperatorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["builtin","olm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operatorTypeOperatorTypePropEnum = append(operatorTypeOperatorTypePropEnum, v)
	}
}

const (

	// OperatorOperatorTypeBuiltin captures enum value "builtin"
	OperatorOperatorTypeBuiltin string = "builtin"

	// OperatorOperatorTypeOlm captures enum value "olm"
	OperatorOperatorTypeOlm string = "olm"
)

// prop value enum
func (m *Operator) validateOperatorTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, operatorTypeOperatorTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Operator) validateOperatorType(formats strfmt.Registry) error {

	if err := validate.Required("operator_type", "body", m.OperatorType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorTypeEnum("operator_type", "body", *m.OperatorType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operator) UnmarshalBinary(b []byte) error {
	var res Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
